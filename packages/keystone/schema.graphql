# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Reservation {
  id: ID!
  guest: User
  status: ReservationStatusType
  restaurant: Restaurant
  table: Table
  expectedTime: DateTime
  remark: Reservation_remark_Document
}

enum ReservationStatusType {
  Canceled
  Proceeding
  Confirmed
  Completed
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Reservation_remark_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ReservationWhereUniqueInput {
  id: ID
}

input ReservationWhereInput {
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
  id: IDFilter
  guest: UserWhereInput
  status: ReservationStatusTypeNullableFilter
  restaurant: RestaurantWhereInput
  table: TableWhereInput
  expectedTime: DateTimeFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input ReservationStatusTypeNullableFilter {
  equals: ReservationStatusType
  in: [ReservationStatusType!]
  notIn: [ReservationStatusType!]
  not: ReservationStatusTypeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input ReservationOrderByInput {
  id: OrderDirection
  status: OrderDirection
  expectedTime: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ReservationUpdateInput {
  guest: UserRelateToOneForUpdateInput
  status: ReservationStatusType
  restaurant: RestaurantRelateToOneForUpdateInput
  table: TableRelateToOneForUpdateInput
  expectedTime: DateTime
  remark: JSON
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input RestaurantRelateToOneForUpdateInput {
  create: RestaurantCreateInput
  connect: RestaurantWhereUniqueInput
  disconnect: Boolean
}

input TableRelateToOneForUpdateInput {
  create: TableCreateInput
  connect: TableWhereUniqueInput
  disconnect: Boolean
}

input ReservationUpdateArgs {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateInput!
}

input ReservationCreateInput {
  guest: UserRelateToOneForCreateInput
  status: ReservationStatusType
  restaurant: RestaurantRelateToOneForCreateInput
  table: TableRelateToOneForCreateInput
  expectedTime: DateTime
  remark: JSON
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input RestaurantRelateToOneForCreateInput {
  create: RestaurantCreateInput
  connect: RestaurantWhereUniqueInput
}

input TableRelateToOneForCreateInput {
  create: TableCreateInput
  connect: TableWhereUniqueInput
}

type Table {
  id: ID!
  name: String
  restaurant: Restaurant
  content: Table_content_Document
}

type Table_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TableWhereUniqueInput {
  id: ID
}

input TableWhereInput {
  AND: [TableWhereInput!]
  OR: [TableWhereInput!]
  NOT: [TableWhereInput!]
  id: IDFilter
  name: StringFilter
  restaurant: RestaurantWhereInput
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input TableOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TableUpdateInput {
  name: String
  restaurant: RestaurantRelateToOneForUpdateInput
  content: JSON
}

input TableUpdateArgs {
  where: TableWhereUniqueInput!
  data: TableUpdateInput!
}

input TableCreateInput {
  name: String
  restaurant: RestaurantRelateToOneForCreateInput
  content: JSON
}

type Restaurant {
  id: ID!
  name: String
  staffs(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  staffsCount(where: UserWhereInput! = {}): Int
  content: Restaurant_content_Document
  logo: String
  features: [featureFields]
}

type Restaurant_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type featureFields {
  name: String
  enabled: Boolean
  definedBy: String
}

input RestaurantWhereUniqueInput {
  id: ID
}

input RestaurantWhereInput {
  AND: [RestaurantWhereInput!]
  OR: [RestaurantWhereInput!]
  NOT: [RestaurantWhereInput!]
  id: IDFilter
  name: StringFilter
  staffs: UserManyRelationFilter
  logo: StringFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RestaurantOrderByInput {
  id: OrderDirection
  name: OrderDirection
  logo: OrderDirection
}

input RestaurantUpdateInput {
  name: String
  staffs: UserRelateToManyForUpdateInput
  content: JSON
  logo: String
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RestaurantUpdateArgs {
  where: RestaurantWhereUniqueInput!
  data: RestaurantUpdateInput!
}

input RestaurantCreateInput {
  name: String
  staffs: UserRelateToManyForCreateInput
  content: JSON
  logo: String
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  phone: String
  email: String
  password: PasswordState
  isStaff: Boolean
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  restaurants(where: RestaurantWhereInput! = {}, orderBy: [RestaurantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RestaurantWhereUniqueInput): [Restaurant!]
  restaurantsCount(where: RestaurantWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  phone: StringFilter
  email: StringFilter
  isStaff: BooleanFilter
  posts: PostManyRelationFilter
  restaurants: RestaurantManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input RestaurantManyRelationFilter {
  every: RestaurantWhereInput
  some: RestaurantWhereInput
  none: RestaurantWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  isStaff: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  phone: String
  email: String
  password: String
  isStaff: Boolean
  posts: PostRelateToManyForUpdateInput
  restaurants: RestaurantRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input RestaurantRelateToManyForUpdateInput {
  disconnect: [RestaurantWhereUniqueInput!]
  set: [RestaurantWhereUniqueInput!]
  create: [RestaurantCreateInput!]
  connect: [RestaurantWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  phone: String
  email: String
  password: String
  isStaff: Boolean
  posts: PostRelateToManyForCreateInput
  restaurants: RestaurantRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input RestaurantRelateToManyForCreateInput {
  create: [RestaurantCreateInput!]
  connect: [RestaurantWhereUniqueInput!]
}

type Feature {
  id: ID!
  name: String
  description: String
}

input FeatureWhereUniqueInput {
  id: ID
}

input FeatureWhereInput {
  AND: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
}

input FeatureOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input FeatureUpdateInput {
  name: String
  description: String
}

input FeatureUpdateArgs {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateInput!
}

input FeatureCreateInput {
  name: String
  description: String
}

type FeatureToggle {
  id: ID!
  feature: Feature
  enabled: Boolean
  restaurant(where: RestaurantWhereInput! = {}, orderBy: [RestaurantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RestaurantWhereUniqueInput): [Restaurant!]
  restaurantCount(where: RestaurantWhereInput! = {}): Int
}

input FeatureToggleWhereUniqueInput {
  id: ID
}

input FeatureToggleWhereInput {
  AND: [FeatureToggleWhereInput!]
  OR: [FeatureToggleWhereInput!]
  NOT: [FeatureToggleWhereInput!]
  id: IDFilter
  feature: FeatureWhereInput
  enabled: BooleanFilter
  restaurant: RestaurantManyRelationFilter
}

input FeatureToggleOrderByInput {
  id: OrderDirection
  enabled: OrderDirection
}

input FeatureToggleUpdateInput {
  feature: FeatureRelateToOneForUpdateInput
  enabled: Boolean
  restaurant: RestaurantRelateToManyForUpdateInput
}

input FeatureRelateToOneForUpdateInput {
  create: FeatureCreateInput
  connect: FeatureWhereUniqueInput
  disconnect: Boolean
}

input FeatureToggleUpdateArgs {
  where: FeatureToggleWhereUniqueInput!
  data: FeatureToggleUpdateInput!
}

input FeatureToggleCreateInput {
  feature: FeatureRelateToOneForCreateInput
  enabled: Boolean
  restaurant: RestaurantRelateToManyForCreateInput
}

input FeatureRelateToOneForCreateInput {
  create: FeatureCreateInput
  connect: FeatureWhereUniqueInput
}

type FeatureSchedule {
  id: ID!
  name: String
  restaurant(where: RestaurantWhereInput! = {}, orderBy: [RestaurantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RestaurantWhereUniqueInput): [Restaurant!]
  restaurantCount(where: RestaurantWhereInput! = {}): Int
  feature(where: FeatureWhereInput! = {}, orderBy: [FeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeatureWhereUniqueInput): [Feature!]
  featureCount(where: FeatureWhereInput! = {}): Int
  schedule(where: ScheduleWhereInput! = {}, orderBy: [ScheduleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScheduleWhereUniqueInput): [Schedule!]
  scheduleCount(where: ScheduleWhereInput! = {}): Int
  enabled: Boolean
}

input FeatureScheduleWhereUniqueInput {
  id: ID
}

input FeatureScheduleWhereInput {
  AND: [FeatureScheduleWhereInput!]
  OR: [FeatureScheduleWhereInput!]
  NOT: [FeatureScheduleWhereInput!]
  id: IDFilter
  name: StringFilter
  restaurant: RestaurantManyRelationFilter
  feature: FeatureManyRelationFilter
  schedule: ScheduleManyRelationFilter
  enabled: BooleanFilter
}

input FeatureManyRelationFilter {
  every: FeatureWhereInput
  some: FeatureWhereInput
  none: FeatureWhereInput
}

input ScheduleManyRelationFilter {
  every: ScheduleWhereInput
  some: ScheduleWhereInput
  none: ScheduleWhereInput
}

input FeatureScheduleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  enabled: OrderDirection
}

input FeatureScheduleUpdateInput {
  name: String
  restaurant: RestaurantRelateToManyForUpdateInput
  feature: FeatureRelateToManyForUpdateInput
  schedule: ScheduleRelateToManyForUpdateInput
  enabled: Boolean
}

input FeatureRelateToManyForUpdateInput {
  disconnect: [FeatureWhereUniqueInput!]
  set: [FeatureWhereUniqueInput!]
  create: [FeatureCreateInput!]
  connect: [FeatureWhereUniqueInput!]
}

input ScheduleRelateToManyForUpdateInput {
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
  create: [ScheduleCreateInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input FeatureScheduleUpdateArgs {
  where: FeatureScheduleWhereUniqueInput!
  data: FeatureScheduleUpdateInput!
}

input FeatureScheduleCreateInput {
  name: String
  restaurant: RestaurantRelateToManyForCreateInput
  feature: FeatureRelateToManyForCreateInput
  schedule: ScheduleRelateToManyForCreateInput
  enabled: Boolean
}

input FeatureRelateToManyForCreateInput {
  create: [FeatureCreateInput!]
  connect: [FeatureWhereUniqueInput!]
}

input ScheduleRelateToManyForCreateInput {
  create: [ScheduleCreateInput!]
  connect: [ScheduleWhereUniqueInput!]
}

type Schedule {
  id: ID!
  name: String
  startedAt: DateTime
  endedAt: DateTime
}

input ScheduleWhereUniqueInput {
  id: ID
}

input ScheduleWhereInput {
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
  id: IDFilter
  name: StringFilter
  startedAt: DateTimeNullableFilter
  endedAt: DateTimeNullableFilter
}

input ScheduleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  startedAt: OrderDirection
  endedAt: OrderDirection
}

input ScheduleUpdateInput {
  name: String
  startedAt: DateTime
  endedAt: DateTime
}

input ScheduleUpdateArgs {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateInput!
}

input ScheduleCreateInput {
  name: String
  startedAt: DateTime
  endedAt: DateTime
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createReservation(data: ReservationCreateInput!): Reservation
  createReservations(data: [ReservationCreateInput!]!): [Reservation]
  updateReservation(where: ReservationWhereUniqueInput!, data: ReservationUpdateInput!): Reservation
  updateReservations(data: [ReservationUpdateArgs!]!): [Reservation]
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteReservations(where: [ReservationWhereUniqueInput!]!): [Reservation]
  createTable(data: TableCreateInput!): Table
  createTables(data: [TableCreateInput!]!): [Table]
  updateTable(where: TableWhereUniqueInput!, data: TableUpdateInput!): Table
  updateTables(data: [TableUpdateArgs!]!): [Table]
  deleteTable(where: TableWhereUniqueInput!): Table
  deleteTables(where: [TableWhereUniqueInput!]!): [Table]
  createRestaurant(data: RestaurantCreateInput!): Restaurant
  createRestaurants(data: [RestaurantCreateInput!]!): [Restaurant]
  updateRestaurant(where: RestaurantWhereUniqueInput!, data: RestaurantUpdateInput!): Restaurant
  updateRestaurants(data: [RestaurantUpdateArgs!]!): [Restaurant]
  deleteRestaurant(where: RestaurantWhereUniqueInput!): Restaurant
  deleteRestaurants(where: [RestaurantWhereUniqueInput!]!): [Restaurant]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFeature(data: FeatureCreateInput!): Feature
  createFeatures(data: [FeatureCreateInput!]!): [Feature]
  updateFeature(where: FeatureWhereUniqueInput!, data: FeatureUpdateInput!): Feature
  updateFeatures(data: [FeatureUpdateArgs!]!): [Feature]
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteFeatures(where: [FeatureWhereUniqueInput!]!): [Feature]
  createFeatureToggle(data: FeatureToggleCreateInput!): FeatureToggle
  createFeatureToggles(data: [FeatureToggleCreateInput!]!): [FeatureToggle]
  updateFeatureToggle(where: FeatureToggleWhereUniqueInput!, data: FeatureToggleUpdateInput!): FeatureToggle
  updateFeatureToggles(data: [FeatureToggleUpdateArgs!]!): [FeatureToggle]
  deleteFeatureToggle(where: FeatureToggleWhereUniqueInput!): FeatureToggle
  deleteFeatureToggles(where: [FeatureToggleWhereUniqueInput!]!): [FeatureToggle]
  createFeatureSchedule(data: FeatureScheduleCreateInput!): FeatureSchedule
  createFeatureSchedules(data: [FeatureScheduleCreateInput!]!): [FeatureSchedule]
  updateFeatureSchedule(where: FeatureScheduleWhereUniqueInput!, data: FeatureScheduleUpdateInput!): FeatureSchedule
  updateFeatureSchedules(data: [FeatureScheduleUpdateArgs!]!): [FeatureSchedule]
  deleteFeatureSchedule(where: FeatureScheduleWhereUniqueInput!): FeatureSchedule
  deleteFeatureSchedules(where: [FeatureScheduleWhereUniqueInput!]!): [FeatureSchedule]
  createSchedule(data: ScheduleCreateInput!): Schedule
  createSchedules(data: [ScheduleCreateInput!]!): [Schedule]
  updateSchedule(where: ScheduleWhereUniqueInput!, data: ScheduleUpdateInput!): Schedule
  updateSchedules(data: [ScheduleUpdateArgs!]!): [Schedule]
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteSchedules(where: [ScheduleWhereUniqueInput!]!): [Schedule]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  reservations(where: ReservationWhereInput! = {}, orderBy: [ReservationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReservationWhereUniqueInput): [Reservation!]
  reservation(where: ReservationWhereUniqueInput!): Reservation
  reservationsCount(where: ReservationWhereInput! = {}): Int
  tables(where: TableWhereInput! = {}, orderBy: [TableOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TableWhereUniqueInput): [Table!]
  table(where: TableWhereUniqueInput!): Table
  tablesCount(where: TableWhereInput! = {}): Int
  restaurants(where: RestaurantWhereInput! = {}, orderBy: [RestaurantOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RestaurantWhereUniqueInput): [Restaurant!]
  restaurant(where: RestaurantWhereUniqueInput!): Restaurant
  restaurantsCount(where: RestaurantWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  features(where: FeatureWhereInput! = {}, orderBy: [FeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeatureWhereUniqueInput): [Feature!]
  feature(where: FeatureWhereUniqueInput!): Feature
  featuresCount(where: FeatureWhereInput! = {}): Int
  featureToggles(where: FeatureToggleWhereInput! = {}, orderBy: [FeatureToggleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeatureToggleWhereUniqueInput): [FeatureToggle!]
  featureToggle(where: FeatureToggleWhereUniqueInput!): FeatureToggle
  featureTogglesCount(where: FeatureToggleWhereInput! = {}): Int
  featureSchedules(where: FeatureScheduleWhereInput! = {}, orderBy: [FeatureScheduleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeatureScheduleWhereUniqueInput): [FeatureSchedule!]
  featureSchedule(where: FeatureScheduleWhereUniqueInput!): FeatureSchedule
  featureSchedulesCount(where: FeatureScheduleWhereInput! = {}): Int
  schedules(where: ScheduleWhereInput! = {}, orderBy: [ScheduleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ScheduleWhereUniqueInput): [Schedule!]
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedulesCount(where: ScheduleWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
